#include <esp_now.h>
#include <WiFi.h>

#define PIN_X 32
#define PIN_Y 34

uint8_t broadcastAddress[] = {0x84,0xCC,0xA8,0x5F,0x43,0xA0};
int time2;
int debounce=200;
int state;

typedef struct struct_message {
  int x;
  int y;
} struct_message;

struct_message myData;

// callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("\r\nLast Packet Send Status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}

 
void setup() {
  Serial.begin(115200);
  WiFi.mode(WIFI_STA);
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  esp_now_register_send_cb(OnDataSent);
  esp_now_peer_info_t peerInfo;
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;  
  peerInfo.encrypt = false;
//  
  // Add peer        
  if (esp_now_add_peer(&peerInfo) != ESP_OK){
    Serial.println("Failed to add peer");
    return;
  }
  pinMode(PIN_X,INPUT);
  pinMode(PIN_Y,INPUT);
}

void loop() {
  // Set values to send
  myData.x = analogRead(PIN_X);
  myData.y = analogRead(PIN_Y);

  if(myData.x>1900 || myData.x<1700||myData.y>1900 || myData.y<1700){ 
  esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *) &myData, sizeof(myData));
  }
Serial.println(myData.x);
Serial.println(myData.y);

////   
//if (result == ESP_OK) {
//  Serial.println("Sent with success");
//}
//else {
//Serial.println("Error sending the data");
//   }

}